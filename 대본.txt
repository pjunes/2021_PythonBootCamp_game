안녕하세요. 이번 발표자 박준석입니다.

제가 만든 프로그램은 이사하기 게임입니다.



발표는 우선 게임에 대해서 설명을 한 뒤,

게임이 내부적으로 어떻게 동작하는지 코드를 보여드리고,

마지막으로 시연을 하는 순서로 진행되겠습니다.



먼저 게임의 진행 방식에 대해서 설명드리겠습니다.

제가 만든 이사하기 게임은 위에서 아래로 내려다보는 시점으로, 방향키를 통해 캐릭터를 조종합니다.

집에 표시된, 가구가 들어가야 하는 위치를 확인하고,

트럭에서 가구를 받아 정해진 위치로 옮기기를 반복하여

모든 가구를 옮기면 게임이 클리어되는 방식입니다.

캐릭터는 맵 밖이나 가구, 트럭 위로 갈 수 없습니다.

가구를 들면 가구에 따라 캐릭터의 속도가 느려집니다.



다음으로 게임이 어떻게 동작하는지 설명드리겠습니다.

게임 시작전 (사용자가 캐릭터를 최초 조작하기 전에)

게임은 가구가 배치되어야 할 위치를 집에 지정합니다.

게임이 시작되고, 사용자가 캐릭터를 조작하기 시작하면,

게임은 캐릭터가 정해진 위치에서만 움직이도록 캐릭터의 움직임을 제어 해주며,

트럭과 접촉시 캐릭터에게 가구를 지급해주고, 가구를 올바른 위치에 옮길경우 가구를 배치해줍니다.

가구를 전부 옮기고 나면 게임이 끝납니다.





가구를 배치하는 과정입니다.

2차원 배열에 랜덤하게 배치를 한 뒤, 그대로 그래픽으로 옮기는 방식을 사용했습니다.

관련된 클래스들을 먼저 보여드리겠습니다.

우선 2차원 배열을 포함하는 House() 라는 클래스가 있습니다.

House()는 2차원 배열의 가로, 세로 길이와 2차원 배열을 가지고,

배열의 원소로 Block() 클래스를 가집니다.

Block은 집의 각 칸을 의미하며, 현재 무엇이 배치되어 있는지, 또는 목적이 있는지를 속성으로 가집니다.





Block에는 배치되는 가구를 의미하는 클래스 Object입니다.

Object는 가구의 이름, 무게, 가로, 세로길이를 속성으로 가집니다.

생성된 Object를 관리할 수 있게 ObjectList도 있고,

ObjectList는 가구가 차지하는 면적 순서로 정렬 할 수 있는 기능이 있습니다.




게임의 핵심인 가구를 배치하는 기능입니다.

가구 리스트에서 가구를 하나씩 받아오는데, 

면적이 큰 것부터 처리하는것이 유리해서 먼저 가구 리스트를 면적의 내림차순으로 정렬을 진행합니다.

그 후 집안의 좌표 (x, y)를 랜덤함수를 통해 랜덤하게 받아와 그 자리에 가구가 들어갈 수 있는지 확인합니다.

이때 배치할 가구의 길이를 고려해서 index 오류가 나지 않도록 x, y 값의 범위를 조정했습니다.

불가능하다면 무한반복, 가능하다면 배치하고 다음 가구로 넘어갑니다.


배치가 가능한지 확인하는 함수 check place 입니다.

지정된 위치 x,y 로 부터 가구의 크기를 고려해 가구가 들어갈 위치의 모든 block을 이중 for문으로 확인해 모두 비어있으면 참값을 반환합니다.


locate object는 배치가 가능하다고 확인 한 뒤 실행되어 각 블록에 가구를 넣어주는 기능을 합니다.


이렇게 모든 데이터를 만든 다음 그래픽으로 표현하는 단계입니다.

게임의 각 요소를 좌표를 잘 활용하여 원하는 위치에 이미지들을 배치합니다.

각 클래스의 이름에 graphic의 첫글자 G를 붙여서 구분하기 쉽게 만들었습니다.

집을 보여주는 houseG는

house의 만들어진 집안 배치도를 그대로 가져와 그래픽으로 구현할 수 있게 만들어졌습니다.




BlockG는 집안의 블록의 이미지를 상황에 따라 변경 할 수 있도록 제작되었습니다.

여기서 str값인 이름을 주면 사진을 반환하는 함수를 만들어 활용하였습니다.




캐릭터는 캔버스의 원으로 표현하였고, 방향키로 움직일 수 있게 만들었습니다.

가구의 무게가 이동속도에 미치는 영향을 조절하는 strength,

그리고 캐릭터는 현재 무엇을 들고있는지를 나타내는 pocket을 가집니다.



캐릭터의 움직임에 관련된 함수들입니다.

방향키가 입력되었을때, 캐릭터의 다음 예상 위치를 반환해주는 함수와 두 물체가 충돌했는지 알려주는 함수를 통해

들어갈 수 없는 구역에 들어가려고 한다면, 움직일 수 없게 하였습니다.



충돌했을때 어떤 동작을 할것인지 세부적으로 설정한 함수 update입니다.

충돌한다면 거짓를 반환해 캐릭터가 움직이지 못하게 하고, 그렇지 않다면 참을 반환해 움직임을 진행합니다.

맵 밖으로 못나가게 하는 기능을 가지고,

트럭과 충돌했을시, 캐릭터가 가구를 들고 있지 않다면 가구를 받고, 아니라면 아무일도 일어나지 않습니다.

모든 가구를 다 옮기고 트럭에 다시 충돌하면 게임이 끝납니다.

예정된 가구의 자리에 충돌했을경우

들고있는 가구와 예정된 가구를 비교해 같다면 가구를 배치합니다.








느낀점

처음 계획은 메인 화면도 만들고, 점수도 파일 입출력으로 구현하여 기록을 저장하고,

tkinter의 기능을 이용해서 난이도 조절도 하고 집주변에 벽도 세우고하는 상상을 했는데, 생각되로 잘 되진 않았습니다.

계획을 세운 뒤, 코드를 작성하는 과정에서 계획대로 진행되지 않아 기능을 없애기도 하고,

쉬운방법으로 타협하기도 하고, 코드도 깔끔하지 못하게 점점 어질러지는 느낌을 받았습니다.

코드를 깔끔하게 만들고 계획된 것을 원활이 구현하기 위해서,

많이 연습해야겠다고 생각하였습니다.











